реализовать структуру данных ассоциативный массив (АМ)
 AssociativeArray, позволяющий хранить пары вида (ключ, значение) и
поддерживающий операции добавления пары, а также поиска и удаления
пары по ключу.

АМ не может хранить две пары с одинаковыми ключами. Если при
добавлении пары обнаруживается, что в АМ уже есть другая пара с
таким же ключом, то значение существующей пары обновляется, а старое
значение возвращается.

String add(String key, String val);
String containsKey(String key);
String remove(String key)

add должен возвращать null, если добавилось новое значение, старое
значение, если ключ уже был.

containsKey должен возвращать значение, если ключ уже существует,
null, если ключа нет.

remove -- удаленное значение, если было, null, если ничего не
удалилось

реализовать АМ так, чтобы доступ к элементам происходил не за O(n)
(линейное время), а за O(1) (константное) время в лучшем случае.
Для этого сохранять value в массиве по индексу key.hashCode()
 % arr.length. При коллизии (совпадении) индексов разных ключей
хранить их значения в односвязном списке (реализовать для строк). При
изменении размера массива перехэшировать хранимые элементы для нового
размера, чтобы получение элементов, сохраненных до изменения размера,
было возможным.

В качестве связанного списка, который будет храниться в ячейках
массива можно использовать LinkedList из стандартных коллекций явы.

используя АМ написать телефонный справочник, который по фио будет
выводить номер телефона.
